/** * Represent a superclass for all possible items such as TextField,  * MovieClip and Images. Here there will be a type that represent * which item we are talking about and we should define a structure * for every item type (object) so that we can serialize it in a  * cookie if necessary.  *  **/package com.ipnotica.content.blackboard.producs.product.item {		import com.greensock.TweenLite;	import com.ipnotica.utils.Config;	import com.ipnotica.utils.resize.ResizableMovieClip;		import flash.display.MovieClip;	import flash.events.MouseEvent;
	public class Item extends MovieClip {				public var structure:Object;		public var itemXML:XML;		public var content:*;		public var myResizableMovieClip:ResizableMovieClip;		public function Item(structure:Object, itemXML:XML) {			super();			this.structure = structure;			this.itemXML = itemXML;			buttonMode = true;		}						/**		 * -------------------- IMPORTANT TODO ----------------------		 * Apply the properties settled up into structure.properties		 * This will be used in the moment we will have a structure		 * and we want recreate the peronalized tshirt.		 **/		 				public function applyProperties(structure:XML):void {			for (var i:int = 0; i< structure.children().length(); i++) 				setProperty(structure.children()[i].name(), structure.children()[i]);		}						/** Set properties to images, swf and texts */		private function setProperty(key:String, value:String):void {			switch (key) {				case "x"       : setHorizontalValue(value); break;				case "y"       : setVerticalValue(value);   break;				case "rotation": setRotationValue(value);   break;				case "height"  : setHeightValue(value);     break;				case "width"   : setWidthValue(value);      break;				case "color"   : setColorValue(value);      break;				case "alpha"   : setAlphaValue(value);      break;				case "scale"   : ignoreFunction(value);     break; // ignored				case "font"    : ignoreFunction(value);     break; // ignored				default: trace (name + " - NOT HANDLED - ");			}		}				private function setHorizontalValue(value:String):void {			myResizableMovieClip.x = structure.properties.x = Number(value);		}				private function setVerticalValue(value:String):void {			myResizableMovieClip.y = structure.properties.y = Number(value);		}				private function setRotationValue(value:String):void {			structure.properties.rotation = Number(value);			myResizableMovieClip.setRotation(Number(value));		}				private function setHeightValue(value:String):void {			structure.properties.height = Number(value);			myResizableMovieClip.setHeight(Number(value));		}				private function setWidthValue(value:String):void {			structure.properties.width = Number(value);			myResizableMovieClip.setWidth(Number(value));		}				private function setColorValue(value:String):void {			var color:Number = structure.properties.color = Number(value);			var type:String = itemXML.type;						// if changing, see the funciton into the color button			if (type == "swf") {				var layers:XMLList = itemXML.layers;				var layer:MovieClip = content[layers.layer[0].@id]; // take the first color (think if there are more)				TweenLite.to(layer, 1, {tint: color})			} 			if (type == "png") { TweenLite.to(content, 1, {tint: color}) }			if (type == "texts") { TweenLite.to(content, 1, {tint: color}) }		}				private function setAlphaValue(value:String):void {			content.alpha = structure.properties.alpha = Number(value);		}				// hack to handle a key that should be removed		private function ignoreFunction(value:String):void { }					}}