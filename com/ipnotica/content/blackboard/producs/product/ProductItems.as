/** * Items container  *  **/package com.ipnotica.content.blackboard.producs.product {		import com.greensock.TweenLite;	import com.ipnotica.content.blackboard.producs.customization.Customization;	import com.ipnotica.content.blackboard.producs.product.item.Item;	import com.ipnotica.utils.Config;	import com.ipnotica.utils.CustomEvents;		import flash.display.MovieClip;	import flash.text.AntiAliasType;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;
	public class ProductItems extends MovieClip {				public var customization:Customization;				public function ProductItems() {			super();			init(); 		}				private function init():void {			customization = new Customization();		}				// if the current product view is the selected one, add the product		public function onThumbClicked(e:CustomEvents):void {			// load the movieclip to the products			if (Config.menuFamily == "images") {				var product:Product = Product(this.parent);				if (product.id == Config.productVisibleID) {					var item:Item = addItem(e.data.id, e.data.type, e.data.item);					setSelectedItem(item);					if (e.data.structure) { setPropertiesObject(e.data.structure, item) }; // if I'm loading an existing product I have to set the properties				}				Config.doc.dispatchEvent(new CustomEvents(CustomEvents.ITEM_ADDED, {}));			}						// load the new product 			if (Config.menuFamily == "products") {				Config.body.footer.clear();				Config.productID = e.data.id;				Config.doc.initDefaultConfig();				Config.body.content.update();				Config.body.header.updateHeader(null);			}						if (Config.menuFamily == "texts" && e.data.action == "add") {				var itemText:Item = addItem(e.data.text, "texts", Config.currentFont.font);				setSelectedItem(itemText);							}						if (Config.menuFamily == "texts" && e.data.action == "update") { // I clicked to the update button in the menu header				if (Config.currentItem.structure.type == "texts") { // means I'm acting on an existing text					Config.currentItem.structure.properties.font = Config.currentFontName;					Config.currentItem.content.defaultTextFormat = new TextFormat(Config.currentFontName, 18, 0);					Config.currentItem.content.antiAliasType = AntiAliasType.ADVANCED;           			Config.currentItem.content.autoSize = TextFieldAutoSize.NONE;					Config.currentItem.content.embedFonts = true;					Config.currentItem.content.textColor = Config.fontDefaultColor;					Config.currentItem.content.htmlText = "<p>"+ e.data.text + "</p>";					Config.currentItem.content.height = Config.currentItem.content.textHeight+5;					Config.currentItem.content.width  = Config.currentItem.content.textWidth+5;					Config.currentItem.myResizableMovieClip.centerItem();				}			}					}				/** Create and add the new item **/		public function addItem(id:String, type:String, itemXML:XML):Item {			var item:Item = customization.addItem(id, type, itemXML);			addChild(item);			return item;		}				/** Set a specific item as selected */		private function setSelectedItem(item:Item):void {			Config.currentItem = item;			Config.body.footer.update();		}						private function setPropertiesObject(structure:XML, item:Item):void {			for (var i:int = 0; i< structure.children().length(); i++) {				//trace("--->", structure.children()[i].name(), structure.children()[i]);				setProperty(structure.children()[i].name(), structure.children()[i], item);			}					}				/** Set properties to images, swf and texts */		private function setProperty(key:String, value:String, item:Item):void {			switch (key) {				case "x"       : setHorizontalValue(value, item); break;				case "y"       : setVerticalValue(value, item);   break;				case "rotation": setRotationValue(value, item);   break;				case "height"  : setHeightValue(value, item);     break;				case "width"   : setWidthValue(value, item);      break;				case "color"   : setColorValue(value, item);      break;				case "alpha"   : setAlphaValue(value, item);      break;				case "scale"   : ignoreFunction(value, item);     break;				default: trace (name + "!!!!! NOT HANDLED !!!!!");			}		}				private function setHorizontalValue(value:String, item:Item):void {			//item.myResizableMovieClip.x = item.structure.properties.x = Number(value);		}		private function setVerticalValue(value:String, item:Item):void {			//item.myResizableMovieClip.y = item.structure.properties.y = Number(value);		}		private function setRotationValue(value:String, item:Item):void {			//item.rotation = item.structure.properties.rotation = Number(value);		}		private function setHeightValue(value:String, item:Item):void {			//item.height = item.structure.properties.height = Number(value);		}		private function setWidthValue(value:String, item:Item):void {			//item.width = item.structure.properties.width = Number(value);		}		private function setColorValue(value:String, item:Item, type:String = "swf"):void {			//item.structure.properties.color = Number(value);		}		private function setAlphaValue(value:String, item:Item):void {			//item.content.alpha = item.structure.properties.alpha = Number(value);		}				// hack to handle a key that should be removed		private function ignoreFunction(value:String, item:Item):void { }			}}