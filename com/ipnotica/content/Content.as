/** * TShirt conatiner.  * Here are placed all shirts and all items used to personalize it  *  **/package com.ipnotica.content {		import com.ipnotica.content.product.Product;	import com.ipnotica.content.view.View;	import com.ipnotica.utils.Config;	import com.ipnotica.utils.CustomEvents;	import com.ipnotica.utils.Utils;		import flash.display.MovieClip;	public class Content extends MovieClip {				public var productContainer:EditorContainer;				public function Content() {			super();			init();		}				private function init():void {			Utils.setConfig(this);			initListeners();		}						/** Listen when products are loaded so he can build the structure */		private function initListeners():void {			Config.doc.addEventListener(CustomEvents.PRODUCTS_LOADED, onProductsLoaded);		}						/** Set configuration params about actual product and view and then add the content */		private function onProductsLoaded(e:CustomEvents):void {			Config.product 	= Utils.findProduct(Config.productID);			Config.views 	= Config.product.views.view;			Config.viewID 	= Config.views[0].@id; // take the first view as default			addContent();		}						/**		 * Add the product container and populate it 		 **/		public function addContent():void {			addProductContainer();			addProducts();			addViews();		}						/** 		 * Product Container: add the main product container and remove, if existing, the previous one  		 **/		private function addProductContainer():void {			if (productContainer != null) { removeChild(productContainer) } // remove the existing one			productContainer = new EditorContainer();			productContainer.name = "productContainer";			addChild(productContainer);		}						/** 		 * Product: add all product view 		 **/		private function addProducts():void {			for (var i:uint=0; i<Config.views.length(); i++) 				addProduct(Config.views[i].@id);			showSelectedProductView();		}				// Add a single product view		private function addProduct(id:String):void {			var product:Product = new Product(id);			product.visible = false;			product.name = id;			productContainer.addChild(product)		}				// Show the selected view		private function showSelectedProductView():void {			hideAllViews();			showProductView();		}				// Hide all views		private function hideAllViews():void {			for (var i:uint=0; i<Config.views.length(); i++) {				productContainer.getChildByName(Config.views[i].@id).visible = false;			}		}				// Show the selected one		// @todo: make the visualization of the product nicer with Tweenlite 		private function showProductView():void {			productContainer.getChildByName(Config.viewID).visible = true;		}						/** 		 * Views: add all views 		 **/		 				private function addViews():void {			//for (var i:uint=0; i<Config.views.length(); i++) 			//	addView(Config.views[i].@id);			//showSelectedProductView();		}				/*		// Add a single product view		private function addView(id:String):void {			var view = new View(id);			view.visible = false;			view.name = id;			productContainer.addChild(product)		}				// Show the selected view		private function showSelectedProductView():void {			hideAllViews();			showProductView();		}				// Hide all views		private function hideAllViews():void {			for (var i:uint=0; i<Config.views.length(); i++) {				productContainer.getChildByName(Config.views[i].@id).visible = false;			}		}				// Show the selected one		// @todo: make the visualization of the product nicer with Tweenlite 		private function showProductView():void {			productContainer.getChildByName(Config.viewID).visible = true;		}		*/	}}