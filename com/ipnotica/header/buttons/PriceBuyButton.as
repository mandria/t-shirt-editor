package com.ipnotica.header.buttons {		import com.ipnotica.content.blackboard.producs.product.Product;	import com.ipnotica.content.blackboard.producs.product.item.Item;	import com.ipnotica.content.blackboard.views.view.View;	import com.ipnotica.utils.Config;	import com.goodinson.snapshot.*;	import com.ipnotica.utils.Utils;		import ascb.util.Tween;		import com.greensock.TweenLite;	import com.greensock.easing.Strong;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.text.TextField;	public class PriceBuyButton extends MovieClip {				public var price:TextField;		public var structure:String;				public function PriceBuyButton() {			super();			this.buttonMode = true;			this.addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void {			addEventListener(MouseEvent.CLICK, onClick);		}				private function onClick(e:Event):void {		Config.doc.preloader.label.text = "Uploading the image";		Config.doc.preloader.visible = true;		TweenLite.to(Config.doc.preloader, 0.5, { alpha:1, delay:0, ease: Strong.easeOut });					initStructure();		}				// Define the XML structure in a string, representing		// the definition of an entire product 		private function initStructure():void {			//initialProductXML();			//var views:Array = Config.body.content.blackboard.products.list;			//for (var i:int = 0; i < views.length; i++) {			//	initialViewXML(i);			//	initStructureView(Product(views[i]).items.customization.items);			//	finalViewXML();			//}			//finalProductXML();			sendFinalProduct();		}			    		// send the personalized product		private function sendFinalProduct():void {			//trace(">>", structure);			trace("inside send final product");			trace("parent is: "+parent);			trace("parent.parent is: "+parent.parent);			trace("child by name wiews 0: "+Config.views[0]);			trace("child by name wiews 1: "+Config.views[1]);			trace("child lenght: "+Config.views.length());			trace("config body content"+Config.body.content.blackboard.views);			trace("var views:Array = "+Config.body.content.blackboard.products.list);			var wlenght:int = Config.views.length();			var views:Array = Config.body.content.blackboard.products.list;			//trace("var views:Array = "+views[0].items.customization.items.length);			trace("var view 0? = "+views[0]);			//for (var i:int = 0; i < views.length; i++) { views[i].items.customization.items.length; }						//var request:URLRequest = new URLRequest(Config.flashvars.httpDomain + "products.xml");			//request.method = URLRequestMethod.POST;					//var variables:URLVariables = new URLVariables();			//variables["id"] = Config.flashvars.productID; // id of the project			//variables["data"] = srtucture;			//request.data = variables;							//var loader:URLLoader = new URLLoader(request);			//loader.addEventListener(Event.COMPLETE, onProductLoaded);	Snapshot.gateway = "http://www.tshirtpersonalizzate.com/tinotest/snapshot.php";			// capture as JPG and display prompt user to save/download //Snapshot.JPG  //Snapshot.PNG			//Snapshot.DISPLAY; Snapshot.PROMPT; Snapshot.LOAD;	var variables:URLVariables = new URLVariables();	variables.sid=Config.flashvars.sid;	variables.jid=Config.flashvars.jid;	variables.productID=Config.productID;	variables.prezzo=Config.totalPrice;	//variables.xml=structure;			//for (var i:uint=0; i<Config.views.length(); i++) {	//getChildByName(Config.views[i].node.node.id).visible = true;	//}			if (wlenght <= 0)	{	trace("lenght 0");	Snapshot.capture(views[0], null, {				format: Snapshot.JPG,				action: Snapshot.LOAD,								err: this,								sid: variables.sid,								jid: variables.jid,								productID: variables.productID,								prezzo: variables.prezzo,								xml: variables.xml			});		} else if(wlenght >= 1){		trace("lenght 1");				Snapshot.capture(views[0], views[1], {				format: Snapshot.JPG,				action: Snapshot.LOAD,								err: this,								sid: variables.sid,								jid: variables.jid,								productID: variables.productID,								prezzo: variables.prezzo							});			}	}						// redirect to the product page		private function onProductLoaded(e:Event):void {		  	//navigateToURL(new URLRequest(Config.flashvars.httpDomain + "products.xml/" + Config.flashvars.productID),"_blank");		trace("<<<<<<< saved");		}										private function initStructureView(items:Array):void {			for (var i:int = 0; i < items.length; i++) { 				objectXML(items[i]);			}		}						// <product id="1">		//   <views>		private function initialProductXML():void {			structure = "<product id=\"" + Config.productID + "\"><views>";		}				//   </views>		// </product>		private function finalProductXML():void {			structure += "</views></product>";		}				// <view id="1">		//   <objects>		private function initialViewXML(i:int):void {			structure += "<view id=\"" + i + "\"><objects>";		}				//   </objects>		// </view>		private function finalViewXML():void {			structure += "</objects></view>";		}				// <object id="4" type="png">		//   <alpha>0.3</alpha>		//   <height>200</height>		//   <width>200</width>		//   <color>23369394</color>		//   <x>0</x>		//   <y>0</y>		//   <rotation>60</rotation>		//   <path>grafica/bimbo.png</path>		// </object>		private function objectXML(item:Item):void {						for (var val:String in item.structure.properties) { trace("The key", val, "has value", Config.currentItem.structure.properties[val]); }						structure += "<object id=\"" + item.structure.id + "\" type=\"" + item.structure.type + "\">";			if (item.structure.properties.alpha != null) { structure += "<alpha>" + item.structure.properties.alpha + "</alpha>"; }			if (item.structure.properties.height != null) { structure += "<height>" + item.structure.properties.height + "</height>"; }			if (item.structure.properties.width != null) { structure += "<width>" + item.structure.properties.width + "</width>"; }			if (item.structure.properties.color != null) { structure += "<color>" + item.structure.properties.color + "</color>"; }			if (item.structure.properties.x != null) { structure += "<x>" + item.structure.properties.x + "</x>"; }			if (item.structure.properties.y != null) { structure += "<y>" + item.structure.properties.y + "</y>"; }			if (item.structure.properties.rotation != null) { structure += "<rotation>" + item.structure.properties.rotation + "</rotation>"; }			if (item.structure.properties.font != null) { structure += "<font>" + item.structure.properties.font + "</font>"; }			if (item.structure.type != "texts") { structure += "<path>" + item.itemXML.image.node.node.path.text() + item.itemXML.image.node.node.filename.text() + "</path>"; }			structure += "</object>";		}									}}