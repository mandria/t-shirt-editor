/** * List of items navigable through a slider system. *  **/ package com.ipnotica.menu.content.slider {		import com.ipnotica.menu.content.slider.content.SliderContent;	import com.ipnotica.menu.content.slider.navigation.SliderNavigation;	import com.ipnotica.menu.content.slider.thumb.Thumb;	import com.ipnotica.utils.Config;	import com.ipnotica.utils.Utils;		import flash.display.MovieClip;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	public class Slider extends MovieClip {				public var navigationBottom:SliderNavigation;		/**< Controls to move between content */		public var navigationTop:SliderNavigation;			/**< Controls to move between content */		public var content:SliderContent;					/**< Content for the thumbs **/				private var posX:Number;				public function Slider() {			super();			}						/**		 * Based on the kind of object we need we have different rendering		 * - products: list of images with possibility to change color		 * - images: list of movieclips/images		 * - text: list of texts		 **/		public function update():void {			if (Config.menuFamily == "products") { addProducts(); }			if (Config.menuFamily == "images")   { addImages();   } 			if (Config.menuFamily == "texts")    { addTexts();     }		}						/**		 * Add all text thumbs		 **/		private function addTexts():void {			posX = 0;			for (var i:int = 0; i < Config.XMLFonts.font.length(); i++) {				var font:XML = Config.XMLFonts.font[i];				for (var j:int = 0; j < font.styles.style.length(); j++) {					var style:XML = font.styles.style[j];					addText(style.@font);				}			}		}				private function addText(font:String):void {			var text:TextField = new TextField();			// dimensions and positions			text.width	= width  - 10;			text.height = 20;			text.y = posX; posX += text.height;			text.x = 5; 			text.autoSize = TextFieldAutoSize.LEFT;			// font aspects			text.defaultTextFormat = new TextFormat(font, 12, 0);			text.embedFonts = true;			// content			text.htmlText = "<p>"+ font + ": Lorem ipsum ius et dico soleat</p>";			content.c.addChild(text);					}				/**		 * Add all products thumbs		 **/		private function addProducts():void {			//var items:XMLList = Utils.findItems(Config.currentCategory); // do not handle categories for the moment			for (var i:uint=0; i<Config.menuItems.length(); i++) { addThumb(Config.menuItems[i], i); }			updateNavigation();		}						/** 		 * MovieClip Handling 		 **/		private function addImages():void {			var items:XMLList = Utils.findItems(Config.currentCategory);			for (var i:uint=0; i<items.length(); i++) { addThumb(Config.menuItems[i], i); }			updateNavigation();		}						/** Add a new thumb */		private function addThumb(item:XML, i:uint):void {			var row:uint = Math.floor(i / Config.maxThumbsForRow);			var col:uint = i % Config.maxThumbsForRow;			var thumb:Thumb = new Thumb(item);			content.c.addChild(thumb);			thumb.y = thumb.width * row;			thumb.x = thumb.height * col;		}				/** Define the paging system */		private function updateNavigation():void {			swapNavigationUp();			navigationTop.update();			navigationBottom.update();		}				/** Put the menu over the tumbs */		private function swapNavigationUp():void {			addChild(navigationBottom);			addChild(navigationTop);		}						/**		 * Change page handling		 **/				public function changePage():void {			scrollPage();			refreshNavigation();		}				private function scrollPage():void {			content.c.y =  -Config.currentPage * (80 * Config.maxThumbsForCol);		}				private function refreshNavigation():void {			navigationBottom.setPrev();          navigationTop.setPrev();				navigationBottom.setNext();          navigationTop.setNext();			navigationBottom.setPageNumbers();   navigationTop.setPageNumbers();		}			}}